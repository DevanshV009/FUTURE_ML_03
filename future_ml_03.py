# -*- coding: utf-8 -*-
"""FUTURE_ML_03.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1S3w4uYUreIpY9P0xJuGRDsP4_X_y4MHI
"""

# Install required libraries
!pip install nltk --quiet
!pip install tensorflow --quiet
!pip install gradio --quiet

# Imports
import pandas as pd
import numpy as np
import nltk
import tensorflow as tf
import re
import matplotlib.pyplot as plt
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.utils import resample
from sklearn.metrics import classification_report

from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Embedding, GlobalAveragePooling1D, Dropout, Dense

nltk.download('punkt')
nltk.download('stopwords')

# Load dataset
df = pd.read_csv('/content/customer_support_tickets.csv', encoding='utf-8', parse_dates=['Date of Purchase'], dayfirst=True)
df = df[['Ticket Type', 'Ticket Description']].dropna()

# Improved text cleaning
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
import nltk # Ensure nltk is imported here if it wasn't already in this cell

# Download the required punkt_tab resource
nltk.download('punkt_tab', quiet=True)


stop_words = set(stopwords.words('english'))

def clean_text(text):
    text = re.sub(r"{.*?}", "", text)
    text = re.sub(r"http\S+|www\S+|https\S+", '', text)
    text = re.sub(r'\@w+|\#', '', text)
    text = re.sub(r'[^\w\s]', '', text)
    tokens = word_tokenize(text.lower())
    filtered = [w for w in tokens if w not in stop_words and w.isalpha()]
    return " ".join(filtered)

df['clean_text'] = df['Ticket Description'].apply(clean_text)

# Balance the dataset (downsample majority class)
min_class_size = df['Ticket Type'].value_counts().min()
df_balanced = pd.concat([
    resample(group, replace=False, n_samples=min_class_size, random_state=42)
    for _, group in df.groupby('Ticket Type')
])
df = df_balanced.sample(frac=1, random_state=42).reset_index(drop=True)

# Encode labels
le = LabelEncoder()
df['label'] = le.fit_transform(df['Ticket Type'])

# Tokenize text
vocab_size = 5000
max_length = 100
oov_tok = "<OOV>"

tokenizer = Tokenizer(num_words=vocab_size, oov_token=oov_tok)
tokenizer.fit_on_texts(df['clean_text'])
sequences = tokenizer.texts_to_sequences(df['clean_text'])
padded = pad_sequences(sequences, maxlen=max_length, padding='post', truncating='post')

# Train/test split
X = padded
y = df['label'].values
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Define the model
model = Sequential([
    Embedding(vocab_size, 128, input_length=max_length),
    GlobalAveragePooling1D(),
    Dense(64, activation='relu'),
    Dropout(0.5),
    Dense(32, activation='relu'),
    Dense(len(le.classes_), activation='softmax')
])

model.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
model.summary()

# Train the model
history = model.fit(X_train, y_train, epochs=15, validation_data=(X_test, y_test), verbose=1)

# Evaluate
y_pred = np.argmax(model.predict(X_test), axis=1)
print(classification_report(y_test, y_pred, target_names=le.classes_))

# Plot accuracy
plt.plot(history.history['accuracy'], label='Train Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.title('Training vs Validation Accuracy')
plt.legend()
plt.grid(True)
plt.show()

# Define prediction function
def predict_issue(text):
    cleaned = clean_text(text)
    seq = tokenizer.texts_to_sequences([cleaned])
    padded_seq = pad_sequences(seq, maxlen=max_length, padding='post', truncating='post')
    prediction = model.predict(padded_seq)[0]
    top_indices = prediction.argsort()[-3:][::-1]
    results = {le.inverse_transform([i])[0]: f"{prediction[i]:.2f}" for i in top_indices}
    return results

# Gradio interface
import gradio as gr

iface = gr.Interface(
    fn=predict_issue,
    inputs=gr.Textbox(lines=4, placeholder="Describe your issue here..."),
    outputs="label",
    title="Customer Support Chatbot",
    description="Enter your issue and the chatbot will classify it. Shows top 3 probable categories with confidence."
)

iface.launch(share=True)